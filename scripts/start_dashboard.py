#!/usr/bin/env python3
"""
Script de lancement du dashboard The Weeknd.

PIPELINE DE D√âMARRAGE:
1. D√©marre l'orchestrateur en arri√®re-plan (auto-refresh toutes les 5 min)
   - Le premier cycle d√©marre imm√©diatement
   - Affiche un message quand le dashboard est pr√™t
2. Lance le serveur HTTP pour visualiser le dashboard

L'orchestrateur g√®re automatiquement :
- Scraping Kworb (Songs + Albums)
- G√©n√©ration des vues courantes (data/songs.json, data/albums.json)
- Enrichissement Spotify (covers, album_name)
- Rotation des snapshots historiques (J, J-1, J-2)
- Mise √† jour meta.json (dates, stats, covers_revision)
"""

import subprocess
import sys
import os
import threading
import time
import json
from pathlib import Path


def wait_for_first_cycle(base_path: Path, timeout: int = 120):
    """
    Attend que le premier cycle soit termin√© en surveillant meta.json.
    Retourne True si succ√®s, False si timeout.
    """
    meta_path = base_path / "data" / "meta.json"
    start_time = time.time()
    last_status = None
    
    while time.time() - start_time < timeout:
        try:
            if meta_path.exists():
                with open(meta_path, "r", encoding="utf-8") as f:
                    meta = json.load(f)
                
                status = meta.get("last_sync_status")
                
                # Nouveau statut d√©tect√©
                if status != last_status:
                    last_status = status
                    if status == "ok":
                        return True
                    elif status == "error":
                        print("‚îÇ ‚ö†Ô∏è  Premier cycle termin√© avec des erreurs")
                        return True
        except Exception:
            pass
        
        time.sleep(2)  # V√©rifier toutes les 2 secondes
    
    print("‚îÇ ‚ö†Ô∏è  Timeout: Premier cycle toujours en cours")
    return False

def get_python_executable():
    """D√©termine le bon ex√©cutable Python √† utiliser."""
    # Essayer d'abord l'ex√©cutable actuel
    current_python = sys.executable
    
    # Sur Windows, essayer les chemins courants de Python
    if os.name == 'nt':
        possible_pythons = [
            current_python,
            r"C:\Users\axelb\AppData\Local\Programs\Python\Python314\python.exe",
            r"C:\Python314\python.exe",
            r"C:\Python313\python.exe",
            "python",
            "python3"
        ]
        
        for py_path in possible_pythons:
            try:
                # Tester si cet ex√©cutable a les d√©pendances requises
                result = subprocess.run(
                    [py_path, "-c", "import requests, bs4"],
                    capture_output=True,
                    timeout=5
                )
                if result.returncode == 0:
                    return py_path
            except (subprocess.TimeoutExpired, FileNotFoundError):
                continue
    
    return current_python

def main():
    base_path = Path(__file__).parent.parent
    python_exe = get_python_executable()
    
    print("\n" + "=" * 70)
    print(" " * 15 + "THE WEEKND DASHBOARD - D√âMARRAGE")
    print("=" * 70)
    print(f"\nüìç R√©pertoire : {base_path}")
    print(f"üêç Python      : {python_exe}")
    print(f"üîÑ Refresh     : Toutes les 5 minutes (Prompt 8.9)")
    print(f"üåê URL locale  : http://localhost:8000/Website/")
    print("=" * 70)
    
    # ========================================================================
    # √âTAPE 1 : D√©marrage orchestrateur (pipeline automatique)
    # ========================================================================
    print("\n[√âTAPE 1/2] üöÄ Lancement du pipeline d'actualisation...")
    print("‚îÇ")
    print("‚îÇ Le pipeline s'ex√©cute toutes les 5 minutes")
    print("‚îÇ (d√©tails affich√©s ci-dessous)")
    print("‚îÇ")
    
    orchestrator_script = base_path / "scripts" / "auto_refresh.py"
    
    # Lancer l'orchestrateur dans un thread daemon
    def run_orchestrator():
        try:
            env = os.environ.copy()
            env['PYTHONIOENCODING'] = 'utf-8'
            
            subprocess.run(
                [python_exe, str(orchestrator_script)],
                cwd=str(base_path),
                env=env
            )
        except Exception as e:
            print(f"‚ùå Erreur orchestrateur: {e}")
    
    orchestrator_thread = threading.Thread(target=run_orchestrator, daemon=True)
    orchestrator_thread.start()
    
    # Attendre un court instant pour permettre √† l'orchestrateur de d√©marrer
    time.sleep(1)
    
    print("‚îú‚îÄ ‚úÖ Orchestrateur d√©marr√© en arri√®re-plan")
    print("‚îÇ")
    
    # Attendre la fin du premier cycle
    success = wait_for_first_cycle(base_path, timeout=120)
    
    # ========================================================================
    # √âTAPE 2 : Lancement serveur HTTP (APR√àS le premier cycle)
    # ========================================================================
    print("\n[√âTAPE 2/2] üåê Lancement serveur HTTP...")
    print("‚îÇ")
    
    server_path = base_path
    port = 8000
    
    print("‚îú‚îÄ ‚úÖ Serveur pr√™t !")
    print("‚îÇ")
    print("=" * 70)
    print(" " * 20 + "üéâ DASHBOARD ACCESSIBLE")
    print("=" * 70)
    print(f"\nüîó Ouvrez votre navigateur : http://localhost:{port}/Website/")
    print("\nüí° INFOS UTILES:")
    print("   ‚Ä¢ Donn√©es actualis√©es : Pr√™tes √† consulter")
    print("   ‚Ä¢ Refresh auto        : Toutes les 5 minutes (v√©rification Kworb)")
    print("   ‚Ä¢ Covers Spotify      : Enrichies automatiquement √† chaque cycle")
    print("   ‚Ä¢ Badges de rang      : √âph√©m√®res (J vs J-1 uniquement)")
    print("\n‚å®Ô∏è  Appuyez sur Ctrl+C pour arr√™ter le serveur")
    print("=" * 70 + "\n")
    
    try:
        subprocess.run(
            [python_exe, "-m", "http.server", str(port)],
            cwd=str(server_path),
            check=True
        )
    except KeyboardInterrupt:
        print("\n\n" + "=" * 70)
        print(" " * 25 + "‚èπÔ∏è  ARR√äT DU SERVEUR")
        print("=" * 70)
        print("\n‚úÖ Serveur HTTP arr√™t√© proprement")
        print("‚ö†Ô∏è  L'orchestrateur continue en arri√®re-plan (processus daemon)")
        print("\nüëã √Ä bient√¥t !\n")
    except Exception as e:
        print(f"\n‚ùå ERREUR : {e}")
        print("üí° V√©rifiez que le port 8000 n'est pas d√©j√† utilis√©")
        sys.exit(1)

if __name__ == "__main__":
    main()
