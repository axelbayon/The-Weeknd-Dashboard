#!/usr/bin/env python3
"""
Orchestrateur auto-refresh pour The Weeknd Dashboard.
Ex√©cute p√©riodiquement le pipeline : scrape Songs/Albums, r√©g√©n√®re vues, met √† jour meta.json.
Intervalle par d√©faut : 10 minutes (600 secondes).
"""

import json
import os
import random
import subprocess
import sys
import time
import argparse
from datetime import datetime
from pathlib import Path
from typing import Optional, Tuple

# Configuration
DEFAULT_REFRESH_INTERVAL = 600  # 10 minutes en secondes
JITTER_SECONDS = 15  # ¬±15 secondes
LOCK_FILE = ".sync.lock"


class OrchestrationLock:
    """Gestion du verrou anti-chevauchement."""
    
    def __init__(self, lock_path: Path):
        self.lock_path = lock_path
    
    def acquire(self) -> bool:
        """Tente d'acqu√©rir le verrou. Retourne True si succ√®s."""
        if self.lock_path.exists():
            # V√©rifier si le lock est vieux (>15 min = processus mort)
            lock_age = time.time() - self.lock_path.stat().st_mtime
            if lock_age > 900:  # 15 minutes
                print("‚ö†Ô∏è  Lock ancien d√©tect√©, nettoyage...")
                self.release()
            else:
                return False
        
        try:
            self.lock_path.touch()
            return True
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation lock: {e}")
            return False
    
    def release(self):
        """Lib√®re le verrou."""
        try:
            if self.lock_path.exists():
                self.lock_path.unlink()
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur suppression lock: {e}")


def get_python_executable() -> str:
    """D√©termine le bon ex√©cutable Python avec d√©pendances."""
    current_python = sys.executable
    
    if os.name == 'nt':
        possible_pythons = [
            current_python,
            r"C:\Users\axelb\AppData\Local\Programs\Python\Python314\python.exe",
            r"C:\Python314\python.exe",
            "python"
        ]
        
        for py_path in possible_pythons:
            try:
                result = subprocess.run(
                    [py_path, "-c", "import requests, bs4"],
                    capture_output=True,
                    timeout=5
                )
                if result.returncode == 0:
                    return py_path
            except (subprocess.TimeoutExpired, FileNotFoundError):
                continue
    
    return current_python


def run_script(script_path: Path, python_exe: str, base_path: Path) -> Tuple[bool, Optional[str]]:
    """
    Ex√©cute un script Python.
    Retourne (succ√®s, message_erreur).
    """
    try:
        # Forcer l'encodage UTF-8 pour √©viter les probl√®mes avec les emojis
        env = os.environ.copy()
        env['PYTHONIOENCODING'] = 'utf-8'
        
        result = subprocess.run(
            [python_exe, str(script_path)],
            cwd=str(base_path),
            capture_output=True,
            text=True,
            timeout=120,  # 2 minutes max par script
            env=env
        )
        
        if result.returncode == 0:
            return True, None
        else:
            error_msg = result.stderr[:200] if result.stderr else "Erreur inconnue"
            return False, error_msg
    except subprocess.TimeoutExpired:
        return False, "Timeout (>2min)"
    except Exception as e:
        return False, str(e)[:200]


def update_meta_status(base_path: Path, status: str, error: Optional[str] = None):
    """
    Met √† jour meta.json avec le statut de synchronisation.
    """
    meta_path = base_path / "data" / "meta.json"
    
    try:
        if meta_path.exists():
            with open(meta_path, "r", encoding="utf-8") as f:
                meta = json.load(f)
        else:
            meta = {}
        
        meta["last_sync_status"] = status
        meta["last_sync_local_iso"] = datetime.now().isoformat()
        
        if error:
            meta["last_error"] = error
        elif "last_error" in meta:
            del meta["last_error"]
        
        with open(meta_path, "w", encoding="utf-8") as f:
            json.dump(meta, f, indent=2, ensure_ascii=False)
    
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur mise √† jour meta.json: {e}")


def rotate_snapshots(base_path: Path, keep_count: int = 3):
    """
    Maintient un minimum de snapshots et purge les plus anciens.
    Garde au minimum keep_count dates (par d√©faut 3 pour J, J-1, J-2).
    """
    for snapshot_type in ["songs", "albums"]:
        history_path = base_path / "data" / "history" / snapshot_type
        
        if not history_path.exists():
            continue
        
        # Lister tous les snapshots
        snapshots = sorted(history_path.glob("*.json"), reverse=True)
        
        # Garder les keep_count plus r√©cents, supprimer le reste
        if len(snapshots) > keep_count:
            for old_snapshot in snapshots[keep_count:]:
                try:
                    old_snapshot.unlink()
                    print(f"üóëÔ∏è  Snapshot purg√© : {old_snapshot.name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Erreur purge {old_snapshot.name}: {e}")


def run_pipeline(base_path: Path, python_exe: str) -> bool:
    """
    Ex√©cute le pipeline complet de synchronisation.
    
    √âtapes :
    1. Scrape Songs
    2. Scrape Albums
    3. R√©g√©n√®re data/songs.json et data/albums.json
    4. Met √† jour meta.json
    5. Rotation snapshots
    
    Retourne True si succ√®s complet.
    """
    print("\n" + "=" * 60)
    print(f"üîÑ Pipeline START ‚Äî {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    all_success = True
    error_messages = []
    
    # √âtape 1 : Scrape Songs
    print("\n[1/4] Scraping Songs...")
    success, error = run_script(
        base_path / "scripts" / "scrape_kworb_songs.py",
        python_exe,
        base_path
    )
    if success:
        print("‚úÖ Songs scraped")
    else:
        print(f"‚ùå Erreur Songs: {error}")
        all_success = False
        error_messages.append(f"Songs: {error}")
    
    # √âtape 2 : Scrape Albums
    print("\n[2/4] Scraping Albums...")
    success, error = run_script(
        base_path / "scripts" / "scrape_kworb_albums.py",
        python_exe,
        base_path
    )
    if success:
        print("‚úÖ Albums scraped")
    else:
        print(f"‚ùå Erreur Albums: {error}")
        all_success = False
        error_messages.append(f"Albums: {error}")
    
    # √âtape 3 : R√©g√©n√©ration des vues (d√©j√† fait par les scrapers)
    print("\n[3/4] Vues courantes r√©g√©n√©r√©es par scrapers")
    
    # √âtape 4 : Rotation snapshots
    print("\n[4/4] Rotation snapshots (maintien J/J-1/J-2)...")
    rotate_snapshots(base_path, keep_count=3)
    print("‚úÖ Rotation termin√©e")
    
    # Mise √† jour du statut dans meta.json
    if all_success:
        update_meta_status(base_path, "ok")
        print("\n" + "=" * 60)
        print(f"‚úÖ Pipeline END ‚Äî Succ√®s complet")
        print("=" * 60)
    else:
        error_summary = "; ".join(error_messages[:2])  # Max 2 erreurs
        update_meta_status(base_path, "error", error_summary)
        print("\n" + "=" * 60)
        print(f"‚ö†Ô∏è  Pipeline END ‚Äî Erreurs partielles")
        print("=" * 60)
    
    return all_success


def main():
    """Point d'entr√©e principal de l'orchestrateur."""
    parser = argparse.ArgumentParser(description="Orchestrateur auto-refresh Dashboard")
    parser.add_argument(
        "--once",
        action="store_true",
        help="Ex√©cute une seule it√©ration puis s'arr√™te"
    )
    parser.add_argument(
        "--interval",
        type=int,
        default=None,
        help="Intervalle en secondes (override REFRESH_INTERVAL_SECONDS)"
    )
    
    args = parser.parse_args()
    
    # Configuration
    base_path = Path(__file__).parent.parent
    lock_path = base_path / "data" / LOCK_FILE
    python_exe = get_python_executable()
    
    # D√©terminer l'intervalle
    interval = args.interval
    if interval is None:
        interval = int(os.getenv("REFRESH_INTERVAL_SECONDS", DEFAULT_REFRESH_INTERVAL))
    
    print("=" * 60)
    print("üéµ The Weeknd Dashboard ‚Äî Orchestrateur Auto-Refresh")
    print("=" * 60)
    print(f"Mode: {'ONCE' if args.once else 'CONTINU'}")
    print(f"Intervalle: {interval}s ({interval/60:.1f} min)")
    print(f"Python: {python_exe}")
    print(f"Lock file: {lock_path}")
    print("=" * 60)
    
    lock = OrchestrationLock(lock_path)
    iteration = 0
    
    try:
        while True:
            iteration += 1
            
            # Tenter d'acqu√©rir le verrou
            if not lock.acquire():
                print(f"\n‚è≠Ô∏è  It√©ration {iteration} SKIPPED ‚Äî Pipeline d√©j√† en cours (lock actif)")
                if args.once:
                    break
                time.sleep(30)  # Attendre 30s avant de r√©essayer
                continue
            
            try:
                # Ajouter jitter al√©atoire (¬±15s)
                jitter = random.uniform(-JITTER_SECONDS, JITTER_SECONDS)
                if jitter > 0:
                    print(f"\n‚è±Ô∏è  Jitter: +{jitter:.1f}s")
                    time.sleep(jitter)
                
                # Ex√©cuter le pipeline
                run_pipeline(base_path, python_exe)
                
            finally:
                # Toujours lib√©rer le verrou
                lock.release()
            
            # Mode --once : arr√™ter apr√®s une it√©ration
            if args.once:
                print("\n‚úÖ Mode --once : arr√™t apr√®s 1 it√©ration")
                break
            
            # Attendre l'intervalle avant la prochaine ex√©cution
            next_run = datetime.fromtimestamp(time.time() + interval)
            print(f"\n‚è∞ Prochaine ex√©cution : {next_run.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"   (dans {interval}s)")
            
            time.sleep(interval)
    
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Arr√™t demand√© (Ctrl+C)")
        lock.release()
        sys.exit(0)
    
    except Exception as e:
        print(f"\n‚ùå Erreur critique orchestrateur: {e}")
        lock.release()
        sys.exit(1)


if __name__ == "__main__":
    main()
